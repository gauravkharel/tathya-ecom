// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  firstName       String  @map("first_name")
  lastName        String? @map("last_name")
  profileImageUrl String? @map("profile_image_url")
  email           String  @unique
  password        String
  salt            String

  refreshToken RefreshToken?
  cartItem     CartItem[]
  orderItem    OrderItem[]

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

// Define the RefreshToken model to store refresh tokens associated with user sessions
model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime @default(dbgenerated("now()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refreshtoken")
}

model Clothing {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  stock       Float

  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  gender   Gender @relation(fields: [genderId], references: [id])
  genderId Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  cartItem  CartItem[]
  orderItem OrderItem[]

  @@map("clothing")
}

// Define the CartItem model to represent the items added to a user's shopping cart
model CartItem {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  clothing   Clothing @relation(fields: [clothingId], references: [id])
  clothingId Int
  quantity   Int
  createdAt  DateTime @default(now())

  @@map("cart")
}

// Define the OrderItem model to represent the individual items within each order
model OrderItem {
  id String @id @default(uuid())

  user       User     @relation(fields: [userId], references: [id])
  userId     String
  clothing   Clothing @relation(fields: [clothingId], references: [id])
  clothingId Int

  quantity              Int
  orderDate             DateTime      @default(now())
  shippingAddress       String
  billingAddress        String?
  orderStatus           OrderStatus   @default(PENDING)
  paymentStatus         PaymentStatus @default(PENDING)
  paymentMethod         PaymentMethod
  totalPrice            Float
  taxAmount             Float
  shippingCost          Float
  discountAmount        Float?
  trackingNumber        String?
  estimatedDeliveryDate DateTime?
  comments              String?

  @@map("orderitem")
}

model Brand {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]

  @@map("brand")
}

model Gender {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]

  @@map("gender")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]

  @@map("category")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  ESEWA
  BANK_TRANSFER
}
