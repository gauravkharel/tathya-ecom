// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  firstName       String  
  lastName        String? 
  profileImageUrl String? 
  email           String  @unique
  password        String
  salt            String
  phoneNumber     String?

  refreshToken RefreshToken?
  cartItems    CartItem[]
  orders       Order[]
  addresses    Address[]
  payments     Payment[]

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime @default(dbgenerated("now()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refreshtoken")
}

model Clothing {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  stock       Float

  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("clothing")
}

model CartItem {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  clothing   Clothing @relation(fields: [clothingId], references: [id])
  clothingId Int
  quantity   Int
  createdAt  DateTime @default(now())

  @@map("cart")
}

model Order {
  id                    String        @id @default(uuid())
  user                  User          @relation(fields: [userId], references: [id])
  userId                String
  orderDate             DateTime      @default(now())
  orderStatus           OrderStatus   @default(PENDING)
  paymentStatus         PaymentStatus @default(PENDING)
  totalPrice            Float
  taxAmount             Float
  shippingCost          Float
  discountAmount        Float?
  trackingNumber        String?
  estimatedDeliveryDate DateTime?
  comments              String?

  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  billingAddress   Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?

  orderItems OrderItem[]
  Payment    Payment[]

  @@map("orders")
}

model Payment {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  paymentMethod  PaymentMethod
  paymentDetails Json?
  isDefault      Boolean       @default(false)

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  @@map("payments")
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  clothing   Clothing @relation(fields: [clothingId], references: [id])
  clothingId Int
  quantity   Int
  price      Float

  @@map("orderitems")
}

model Address {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean @default(false)

  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Brand {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]

  @@map("brand")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  parentId      Int?
  subCategories Category[] @relation("SubCategories")
  clothing      Clothing[]

  @@unique([name, parentId])
  @@map("categories")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  ESEWA
  BANK_TRANSFER
  ETH
}