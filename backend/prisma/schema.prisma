generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  firstName       String        @map("first_name")
  lastName        String?       @map("last_name")
  profileImageUrl String?       @map("profile_image_url")
  email           String        @unique
  password        String
  salt            String
  roleId          Int
  cartItems       CartItem[]
  orderitem       orderitem[]
  refreshToken    RefreshToken?
  role            Role          @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("refreshtoken")
}

model Clothing {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  brandId     Int
  categoryId  Int
  genderId    Int
  stock       Float
  cartItems   CartItem[]
  brand       Brand       @relation(fields: [brandId], references: [id])
  category    category    @relation(fields: [categoryId], references: [id])
  gender      gender      @relation(fields: [genderId], references: [id])
  orderitem   orderitem[]

  @@map("clothing")
}

model CartItem {
  id         String   @id @default(uuid())
  userId     String
  clothingId Int
  quantity   Int
  createdAt  DateTime @default(now())
  clothing   Clothing @relation(fields: [clothingId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("cart")
}

model Brand {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]

  @@map("brand")
}

model category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]
}

model gender {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]
}

model orderitem {
  id                    String        @id
  userId                String
  clothingId            Int
  quantity              Int
  orderDate             DateTime      @default(now())
  shippingAddress       String
  billingAddress        String?
  orderStatus           OrderStatus   @default(PENDING)
  paymentStatus         PaymentStatus @default(PENDING)
  paymentMethod         PaymentMethod
  totalPrice            Float
  taxAmount             Float
  shippingCost          Float
  discountAmount        Float?
  trackingNumber        String?
  estimatedDeliveryDate DateTime?
  comments              String?
  clothing              Clothing      @relation(fields: [clothingId], references: [id])
  users                 User          @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  ESEWA
  BANK_TRANSFER
}
