// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  firstName       String  @map("first_name")
  lastName        String? @map("last_name")
  profileImageUrl String? @map("profile_image_url")
  email           String  @unique
  password        String
  salt            String

  refreshToken RefreshToken?
  cartItem     CartItem[]
  order        Order[]

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

// Define the RefreshToken model to store refresh tokens associated with user sessions
model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime @default(dbgenerated("now()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refreshtoken")
}

// using denormalized approach for now for sizes and, colors. 
// if it needs to improvised later, we will do that. 

model Brand {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]
}

model Gender {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  clothing Clothing[]
}

model Clothing {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?

  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  gender   Gender @relation(fields: [genderId], references: [id])
  genderId Int

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  cartItem  CartItem[]
  orderItem OrderItem[]

  @@map("clothing")
}

// Define the CartItem model to represent the items added to a user's shopping cart
model CartItem {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  clothing   Clothing @relation(fields: [clothingId], references: [id])
  clothingId Int
  quantity   Int
  createdAt  DateTime @default(now())

  @@map("cart")
}

// Define the Order model to store information about completed orders
model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  totalAmount Float
  createdAt   DateTime    @default(now())
  // Define the relationship with order items
  items       OrderItem[]

  @@map("order")
}

// Define the OrderItem model to represent the individual items within each order
model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  clothing   Clothing @relation(fields: [clothingId], references: [id])
  clothingId Int
  quantity   Int
  price      Float
}
